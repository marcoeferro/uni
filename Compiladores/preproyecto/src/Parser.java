
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Thu Oct 17 13:02:22 ART 2024
//----------------------------------------------------

import java_cup.runtime.Symbol;
import java.util.ArrayList;
import java.util.List;

/** CUP v0.10k generated parser.
  * @version Thu Oct 17 13:02:22 ART 2024
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\031\000\002\003\011\000\002\002\004\000\002\003" +
    "\011\000\002\007\004\000\002\007\004\000\002\007\002" +
    "\000\002\004\005\000\002\005\006\000\002\005\005\000" +
    "\002\005\004\000\002\005\015\000\002\005\011\000\002" +
    "\005\011\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\010\003\000\002\010\003\000" +
    "\002\011\003\000\002\012\005\000\002\012\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\006\004\005\006\004\001\002\000\004\007" +
    "\102\001\002\000\004\007\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\000\001\002\000\004\020\011\001" +
    "\002\000\004\021\012\001\002\000\004\022\013\001\002" +
    "\000\020\004\016\005\017\010\025\013\024\023\ufffc\025" +
    "\021\027\015\001\002\000\004\023\101\001\002\000\004" +
    "\020\073\001\002\000\004\013\uffed\001\002\000\004\013" +
    "\uffec\001\002\000\004\017\070\001\002\000\004\020\051" +
    "\001\002\000\004\013\024\001\002\000\020\004\016\005" +
    "\017\010\025\013\024\023\ufffc\025\021\027\015\001\002" +
    "\000\006\017\uffeb\024\uffeb\001\002\000\016\011\032\012" +
    "\034\013\030\014\033\020\036\024\031\001\002\000\020" +
    "\004\016\005\017\010\025\013\024\023\ufffc\025\021\027" +
    "\015\001\002\000\004\023\ufffd\001\002\000\016\015\ufff1" +
    "\016\ufff1\021\ufff1\024\ufff1\030\ufff1\031\ufff1\001\002\000" +
    "\020\004\ufff8\005\ufff8\010\ufff8\013\ufff8\023\ufff8\025\ufff8" +
    "\027\ufff8\001\002\000\016\015\uffef\016\uffef\021\uffef\024" +
    "\uffef\030\uffef\031\uffef\001\002\000\016\015\ufff0\016\ufff0" +
    "\021\ufff0\024\ufff0\030\ufff0\031\ufff0\001\002\000\016\015" +
    "\uffee\016\uffee\021\uffee\024\uffee\030\uffee\031\uffee\001\002" +
    "\000\010\015\042\016\040\024\045\001\002\000\014\011" +
    "\032\012\034\013\030\014\033\020\036\001\002\000\010" +
    "\015\042\016\040\021\041\001\002\000\014\011\032\012" +
    "\034\013\030\014\033\020\036\001\002\000\016\015\ufff2" +
    "\016\ufff2\021\ufff2\024\ufff2\030\ufff2\031\ufff2\001\002\000" +
    "\014\011\032\012\034\013\030\014\033\020\036\001\002" +
    "\000\016\015\ufff4\016\040\021\ufff4\024\ufff4\030\ufff4\031" +
    "\ufff4\001\002\000\016\015\ufff3\016\ufff3\021\ufff3\024\ufff3" +
    "\030\ufff3\031\ufff3\001\002\000\020\004\ufff9\005\ufff9\010" +
    "\ufff9\013\ufff9\023\ufff9\025\ufff9\027\ufff9\001\002\000\004" +
    "\023\ufffe\001\002\000\004\024\050\001\002\000\020\004" +
    "\ufffb\005\ufffb\010\ufffb\013\ufffb\023\ufffb\025\ufffb\027\ufffb" +
    "\001\002\000\014\011\032\012\034\013\030\014\033\020" +
    "\036\001\002\000\012\015\042\016\040\030\065\031\064" +
    "\001\002\000\004\021\054\001\002\000\004\022\055\001" +
    "\002\000\020\004\016\005\017\010\025\013\024\023\ufffc" +
    "\025\021\027\015\001\002\000\004\023\057\001\002\000" +
    "\022\004\ufff6\005\ufff6\010\ufff6\013\ufff6\023\ufff6\025\ufff6" +
    "\026\060\027\ufff6\001\002\000\004\022\061\001\002\000" +
    "\020\004\016\005\017\010\025\013\024\023\ufffc\025\021" +
    "\027\015\001\002\000\004\023\063\001\002\000\020\004" +
    "\ufff7\005\ufff7\010\ufff7\013\ufff7\023\ufff7\025\ufff7\027\ufff7" +
    "\001\002\000\014\011\032\012\034\013\030\014\033\020" +
    "\036\001\002\000\014\011\032\012\034\013\030\014\033" +
    "\020\036\001\002\000\010\015\042\016\040\021\uffea\001" +
    "\002\000\010\015\042\016\040\021\uffe9\001\002\000\014" +
    "\011\032\012\034\013\030\014\033\020\036\001\002\000" +
    "\010\015\042\016\040\024\072\001\002\000\020\004\ufffa" +
    "\005\ufffa\010\ufffa\013\ufffa\023\ufffa\025\ufffa\027\ufffa\001" +
    "\002\000\014\011\032\012\034\013\030\014\033\020\036" +
    "\001\002\000\010\015\042\016\040\021\075\001\002\000" +
    "\004\022\076\001\002\000\020\004\016\005\017\010\025" +
    "\013\024\023\ufffc\025\021\027\015\001\002\000\004\023" +
    "\100\001\002\000\020\004\ufff5\005\ufff5\010\ufff5\013\ufff5" +
    "\023\ufff5\025\ufff5\027\ufff5\001\002\000\004\002\001\001" +
    "\002\000\004\020\103\001\002\000\004\021\104\001\002" +
    "\000\004\022\105\001\002\000\020\004\016\005\017\010" +
    "\025\013\024\023\ufffc\025\021\027\015\001\002\000\004" +
    "\023\107\001\002\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\105\000\004\003\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\004" +
    "\022\005\025\007\013\010\021\011\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\011\046" +
    "\001\001\000\014\004\022\005\025\007\045\010\021\011" +
    "\017\001\001\000\002\001\001\000\004\006\034\001\001" +
    "\000\014\004\022\005\025\007\026\010\021\011\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\006\036\001\001\000\002\001\001" +
    "\000\004\006\043\001\001\000\002\001\001\000\004\006" +
    "\042\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\006\051\012\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\022\005" +
    "\025\007\055\010\021\011\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\004\022\005" +
    "\025\007\061\010\021\011\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\006\066\001\001\000\004\006" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\006\070\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\073\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\022\005\025\007\076\010\021\011\017\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\004\022\005\025\007\105\010\021\011\017\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Nodo padre; //o nodo raiz
    public ArrayList<String> texto = new ArrayList<>();
    public int contador = 0;
    public SymbolTable symbolTable = new SymbolTable();  // Instanciar la tabla de sÃ­mbolos
    public Integer returnValue = 0;
    public ArrayList<String> codeOutput = new ArrayList<>();
    public Integer offSetCounter = -16;
    public Integer tmpNameCounter = 0;
    public ArrayList<Cod3dir> cod3dirList = new ArrayList<>();

    @Override
    public void syntax_error(Symbol s){
        System.out.println(s  +" Linea "+s.left+1 +"  Columna "+s.right   +" "+ (String)s.value);
    }

    @Override
    public void unrecovered_syntax_error(Symbol s){
        System.out.println(s);
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // COMP ::= EXP GREATER EXP 
            {
              Nodo RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*COMP*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // COMP ::= EXP LESS EXP 
            {
              Nodo RESULT = null;

              CUP$Parser$result = new java_cup.runtime.Symbol(8/*COMP*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VAR ::= ID 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"variable:"+id.toString());
            
            // Buscar la variable en la tabla de sÃ­mbolos
            //String varName = id.toString();
            //Info varInfo = parser.symbolTable.lookup(varName);
            
            Nodo tmp = new Nodo(new Info(id.toString(),Simbolo.ID,null,"variable",parser.offSetCounter),parser.contador);
            parser.offSetCounter = parser.offSetCounter - 16;
            RESULT = tmp;

        
              CUP$Parser$result = new java_cup.runtime.Symbol(7/*VAR*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // TYPE ::= BOOL 
            {
              Nodo RESULT = null;
		
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"TYPE BOOL");
			Nodo tmp = new Nodo(new Info("booleano",Simbolo.BOOL,null,"booleano"),parser.contador);
			RESULT = tmp;
		
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*TYPE*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // TYPE ::= INT 
            {
              Nodo RESULT = null;
		
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"TYPE INT");
			Nodo tmp = new Nodo(new Info("entero",Simbolo.INT,null,"entero"),parser.contador);
			RESULT = tmp;
		
              CUP$Parser$result = new java_cup.runtime.Symbol(6/*TYPE*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXP ::= FALSE 
            {
              Nodo RESULT = null;
		
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"FALSE");
			Nodo tmp = new Nodo(new Info("false",Simbolo.FALSE,0,"booleano"),parser.contador);
            RESULT = tmp;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*EXP*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // EXP ::= TRUE 
            {
              Nodo RESULT = null;
		
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"TRUE");
			Nodo tmp = new Nodo(new Info("true",Simbolo.TRUE,1,"booleano"),parser.contador);
            RESULT = tmp;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*EXP*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // EXP ::= NUMBER 
            {
              Nodo RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"num: "+Integer.parseInt(n.toString()));
            Nodo tmp = new Nodo(new Info(n.toString(),Simbolo.NUMBER,Integer.parseInt(n.toString()),"entero"),parser.contador);
            RESULT = tmp;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*EXP*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // EXP ::= ID 
            {
              Nodo RESULT = null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+id.toString());


            // Buscar la variable en la tabla de sÃ­mbolos
            String varName = id.toString();
            Info varInfo = parser.symbolTable.lookup(varName);
            if (varInfo == null) {
                System.out.println("Error: Variable '" + varName + "' no ha sido declarada.");
            }else{
                Nodo tmp = new Nodo(varInfo,parser.contador);
                RESULT = tmp;
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*EXP*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= LPAREN EXP RPAREN 
            {
              Nodo RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            /*parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"(expresion)");
			Nodo tmp = new Nodo(new Info("expresion",null,e.info.value,null),parser.contador);
			tmp.addHijoIzq(e);*/
            RESULT = e;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*EXP*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXP ::= EXP STAR EXP 
            {
              Nodo RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            parser.contador++;
            parser.tmpNameCounter++;
            // Verificar que ambos operandos son del mismo tipo y compatibles con suma
            if (!a.info.tipo.equals("entero") || !b.info.tipo.equals("entero")) {
                throw new RuntimeException("Error: Tipos incompatibles en suma. Ambos deben ser enteros.");
            }else{
                int resultadoProducto=a.info.value*b.info.value;
                parser.texto.add("graphid:"+parser.contador+" # "+"exp * exp");
                Info tmpInfo = new Info("tmp"+parser.tmpNameCounter.toString(),Simbolo.STAR,resultadoProducto,"entero",parser.offSetCounter);
                parser.offSetCounter = parser.offSetCounter - 16;
                Nodo tmp = new Nodo(tmpInfo,parser.contador);
                tmp.addHijoIzq(a);
                tmp.addHijoDer(b);
                RESULT = tmp;

                //segmento cod3dir...
                parser.codeOutput.add(Cod3dir.genLine("MUL",a.info,b.info,tmp.info));
                parser.cod3dirList.add(new Cod3dir("MUL",a.info,b.info,tmp.info));
                //
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*EXP*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXP ::= EXP PLUS EXP 
            {
              Nodo RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            parser.contador++;
            parser.tmpNameCounter++;
             // Verificar que ambos operandos son del mismo tipo y compatibles con suma
            if (!a.info.tipo.equals("entero") || !b.info.tipo.equals("entero")) {
                throw new RuntimeException("Error: Tipos incompatibles en suma. Ambos deben ser enteros.");
            }else{
                int resultadoSuma=a.info.value + b.info.value;
                parser.texto.add("graphid:"+parser.contador+" # "+"exp + exp");
                Info tmpInfo = new Info("tmp"+parser.tmpNameCounter.toString(),Simbolo.PLUS,resultadoSuma,"entero",parser.offSetCounter);
                parser.offSetCounter = parser.offSetCounter - 16;
                Nodo tmp = new Nodo(tmpInfo,parser.contador);
                tmp.addHijoIzq(a);
                tmp.addHijoDer(b);
                RESULT = tmp;

                //segmento cod3dir...
                parser.codeOutput.add(Cod3dir.genLine("SUM",a.info,b.info,tmp.info));
                parser.cod3dirList.add(new Cod3dir("SUM",a.info,b.info,tmp.info));
                //
            }
        
              CUP$Parser$result = new java_cup.runtime.Symbol(4/*EXP*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // STATEMENT ::= WHILE LPAREN EXP RPAREN LBRACE BLOCK RBRACE 
            {
              Nodo RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parser.contador++;
        parser.texto.add("graphid:"+parser.contador+" # "+"while(exp) {block}");
        Nodo tmp = new Nodo(new Info("while",-1,null,null),parser.contador);
        tmp.addHijoIzq(e);
        tmp.addHijoDer(b);  // Bloque del while
        RESULT = tmp;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // STATEMENT ::= IF LPAREN COMP RPAREN LBRACE BLOCK RBRACE 
            {
              Nodo RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parser.contador++;
        parser.texto.add("graphid:"+parser.contador+" # "+"if(exp) {block}");
        Nodo tmp = new Nodo(new Info("if",-1,null,null),parser.contador);
        tmp.addHijoIzq(e);
        tmp.addHijoDer(b);  // Bloque del if
        RESULT = tmp;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // STATEMENT ::= IF LPAREN COMP RPAREN LBRACE BLOCK RBRACE ELSE LBRACE BLOCK RBRACE 
            {
              Nodo RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int b2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int b2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo b2 = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
        parser.contador++;
        parser.texto.add("graphid:"+parser.contador+" # "+"if(exp) {block} else {block}");
        Nodo tmp = new Nodo(new Info("if-else",-1,null,null),parser.contador);
        tmp.addHijoIzq(e);
        tmp.addHijoIzq(b);  // Bloque del if
        tmp.addHijoDer(b2); // Bloque del else
        RESULT = tmp;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // STATEMENT ::= RETURN SEMICOLON 
            {
              Nodo RESULT = null;
		
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"return;");
            Nodo tmp = new Nodo(new Info("return",Simbolo.RETURN,null,null),parser.contador);
            
			RESULT = tmp;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // STATEMENT ::= RETURN EXP SEMICOLON 
            {
              Nodo RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            parser.contador++;
            parser.tmpNameCounter++;
            parser.texto.add("graphid:"+parser.contador+" # "+"RETURN EXP:e SEMICOLON");
            Nodo tmp = new Nodo(new Info("tmp"+parser.tmpNameCounter.toString(),Simbolo.RETURN,null,null),parser.contador);
			tmp.addHijoIzq(e);
            parser.returnValue = e.info.value;
            // segmento cod3dir
            parser.codeOutput.add(Cod3dir.genLine("RET",null,null,e.info));
            parser.cod3dirList.add(new Cod3dir("RET",null,null,e.info));
            //
			RESULT = tmp;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // STATEMENT ::= VAR EQUAL EXP SEMICOLON 
            {
              Nodo RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo e = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            parser.contador++;
            parser.tmpNameCounter++;
            //  Verificar que el tipo de la variable y la expresiÃ³n sean compatibles
            Info varInfo = parser.symbolTable.lookup(v.info.nombre);
            if (varInfo == null) {
                throw new RuntimeException("Error: Variable '" + v.info.nombre + "' no estÃ¡ declarada.");
            }
            if (!varInfo.tipo.equals(e.info.tipo)) {
                throw new RuntimeException("Error: Tipos incompatibles en asignaciÃ³n. Se esperaba " + varInfo.tipo + " pero se obtuvo " + e.info.tipo);
            }else{

                parser.texto.add("graphid:"+parser.contador+" # variable = expresion");
                Nodo tmp = new Nodo(new Info("\"=\"",Simbolo.EQUAL,null,null),parser.contador);
                tmp.addHijoIzq(v);
                tmp.addHijoDer(e);

                //codigo de interprete
                parser.symbolTable.changeSymbolValue(v.info.nombre,e.info.value);

                //segmento cod3dir
                parser.codeOutput.add(Cod3dir.genLine("ASSGN",e.info,null,v.info));
                parser.cod3dirList.add(new Cod3dir("ASSGN",e.info,null,v.info));
                RESULT = tmp;
            }

        
              CUP$Parser$result = new java_cup.runtime.Symbol(3/*STATEMENT*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // DECL ::= TYPE VAR SEMICOLON 
            {
              Nodo RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Nodo t = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo v = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"DECLARACION: "+ t.info.tipo + "variable;");
			
            // Verificar si la variable ya existe en el Ã¡mbito actual
            String varName = v.info.nombre;
            if (parser.symbolTable.lookup(varName) != null) {
                System.out.println("Error: Variable '" + varName + "' ya declarada.");
            } else {
                // Agregar la variable a la tabla de sÃ­mbolos
                System.out.println("info.nombre: "+v.info.nombre);
                parser.symbolTable.addSymbol(varName, parser.contador, null, t.info.tipo, v.info.offSet);
                Nodo tmp = new Nodo(new Info("declaracion",-1,0,null),parser.contador); //test, todos los valores seran inicializados en 0
                tmp.addHijoIzq(t);
                tmp.addHijoDer(v);
                RESULT = tmp;
            }

        
              CUP$Parser$result = new java_cup.runtime.Symbol(2/*DECL*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // BLOCK ::= 
            {
              Nodo RESULT = null;
		
			RESULT = null;
		
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*BLOCK*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // BLOCK ::= STATEMENT BLOCK 
            {
              Nodo RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo s = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            // Entrar a un nuevo alcance
            parser.symbolTable.enterScope();
            
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"sentencia y bloque");
            Nodo tmp = new Nodo(new Info("bloque",-1,null,null),parser.contador);
			tmp.addHijoIzq(s);
			tmp.addHijoDer(b);
			RESULT = tmp;

            // Salir del alcance al terminar el bloque
            parser.symbolTable.exitScope();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*BLOCK*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // BLOCK ::= DECL BLOCK 
            {
              Nodo RESULT = null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo d = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right;
		Nodo b = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-0)).value;
		
            // Entrar a un nuevo alcance
            parser.symbolTable.enterScope();

            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"declaracion y bloque");
            Nodo tmp = new Nodo(new Info("bloque",-1,null,null),parser.contador);
			tmp.addHijoIzq(d);
			tmp.addHijoDer(b);

			RESULT = tmp;
            // Salir del alcance al terminar el bloque
            parser.symbolTable.exitScope();
        
              CUP$Parser$result = new java_cup.runtime.Symbol(5/*BLOCK*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PROGRAM ::= VOID MAIN LPAREN RPAREN LBRACE BLOCK RBRACE 
            {
              Nodo RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"void main :");
            Nodo tmp = new Nodo(new Info("programa",-1,null,null),parser.contador);
			tmp.addHijoIzq(a);
			parser.padre = tmp;
            parser.returnValue = null;
			RESULT = tmp;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*PROGRAM*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= PROGRAM EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo start_val = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // PROGRAM ::= INT MAIN LPAREN RPAREN LBRACE BLOCK RBRACE 
            {
              Nodo RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Nodo a = (Nodo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		
            parser.contador++;
            parser.texto.add("graphid:"+parser.contador+" # "+"int main :");
            Nodo tmp = new Nodo(new Info("programa",-1,null,null),parser.contador);
			tmp.addHijoIzq(a);
			parser.padre = tmp;
            
			RESULT = tmp;
        
              CUP$Parser$result = new java_cup.runtime.Symbol(1/*PROGRAM*/, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-0)).right, RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

